using System;

namespace AlgoTest.LeetCode.Minimize_Malware_Spread;

public class Minimize_Malware_Spread
{
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        var N = graph.Length;
        var dsu = new DSU(N*N);
        for(var i = 0 ; i < N ;i++)
        for(var j = 0; j < N; j++) 
            if (graph[i][j]==1)
                dsu.Union(i,j);
        
        Array.Sort(initial);
        
        foreach(var i in initial)
        {
            var root =dsu.Find(i);
            dsu.infected[root]++;
        }
        
        var res = -1;
        
        foreach(int i in initial)
        {
            if (dsu.GetInfected(i)== 1)
            {
                if (res == -1)
                    res = i;
                else if (dsu.GetSize(i)>dsu.GetSize(res) || (dsu.GetSize(i)==dsu.GetSize(res)  && i < res) )
                    res = i;
            }
        }
        
        return (res==-1)?initial[0]:res;
    }

    private class DSU
    {
        int[] sets;
        int[] size;
        public int[] infected;
        
        public DSU(int N)
        {
            sets = new int[N];
            size = new int[N];
            infected = new int[N];
            for(int i = 0; i < N; i++)
            {
                sets[i] = i;
                size[i] = 1;
            }
        }
        public int Find(int x)
        {
            if(sets[x]==x)
                return x;
            
            sets[x]= Find(sets[x]);
            return sets[x];
            
        }
        public void Union(int x, int y)
        {
            var px = Find(x);
            var py = Find(y);
            if (px!=py)
            {
                sets[px]=py;
                size[py]+=size[px];
            }
        }
        public int GetSize(int x) => size[Find(x)];

        public int GetInfected(int x) => infected[Find(x)];
    }
}